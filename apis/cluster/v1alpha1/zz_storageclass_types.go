/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageClassObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`
}

type StorageClassParameters struct {

	// StorageClass allow_volume_expansion
	// +kubebuilder:validation:Optional
	AllowVolumeExpansion *bool `json:"allowVolumeExpansion,omitempty" tf:"allow_volume_expansion,omitempty"`

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// K8s cluster ID
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-rancher/apis/cluster/v1alpha2.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// StorageClass provisioner
	// +kubebuilder:validation:Required
	K8SProvisioner *string `json:"k8sProvisioner" tf:"k8s_provisioner,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// StorageClass mount options
	// +kubebuilder:validation:Optional
	MountOptions []*string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// StorageClass provisioner paramaters
	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// StorageClass provisioner reclaim policy
	// +kubebuilder:validation:Optional
	ReclaimPolicy *string `json:"reclaimPolicy,omitempty" tf:"reclaim_policy,omitempty"`

	// StorageClass provisioner volume binding mode
	// +kubebuilder:validation:Optional
	VolumeBindingMode *string `json:"volumeBindingMode,omitempty" tf:"volume_binding_mode,omitempty"`
}

// StorageClassSpec defines the desired state of StorageClass
type StorageClassSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageClassParameters `json:"forProvider"`
}

// StorageClassStatus defines the observed state of StorageClass.
type StorageClassStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageClassObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageClass is the Schema for the StorageClasss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type StorageClass struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageClassSpec   `json:"spec"`
	Status            StorageClassStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageClassList contains a list of StorageClasss
type StorageClassList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageClass `json:"items"`
}

// Repository type metadata.
var (
	StorageClass_Kind             = "StorageClass"
	StorageClass_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageClass_Kind}.String()
	StorageClass_KindAPIVersion   = StorageClass_Kind + "." + CRDGroupVersion.String()
	StorageClass_GroupVersionKind = CRDGroupVersion.WithKind(StorageClass_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageClass{}, &StorageClassList{})
}
