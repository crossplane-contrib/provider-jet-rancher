/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AlertGroup
func (mg *AlertGroup) GetTerraformResourceType() string {
	return "rancher2_cluster_alert_group"
}

// GetConnectionDetailsMapping for this AlertGroup
func (tr *AlertGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AlertGroup
func (tr *AlertGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AlertGroup
func (tr *AlertGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AlertGroup
func (tr *AlertGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AlertGroup
func (tr *AlertGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AlertGroup
func (tr *AlertGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AlertGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AlertGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &AlertGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AlertGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AlertRule
func (mg *AlertRule) GetTerraformResourceType() string {
	return "rancher2_cluster_alert_rule"
}

// GetConnectionDetailsMapping for this AlertRule
func (tr *AlertRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AlertRule
func (tr *AlertRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AlertRule
func (tr *AlertRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AlertRule
func (tr *AlertRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AlertRule
func (tr *AlertRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AlertRule
func (tr *AlertRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AlertRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AlertRule) LateInitialize(attrs []byte) (bool, error) {
	params := &AlertRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AlertRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Driver
func (mg *Driver) GetTerraformResourceType() string {
	return "rancher2_cluster_driver"
}

// GetConnectionDetailsMapping for this Driver
func (tr *Driver) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Driver
func (tr *Driver) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Driver
func (tr *Driver) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Driver
func (tr *Driver) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Driver
func (tr *Driver) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Driver
func (tr *Driver) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Driver using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Driver) LateInitialize(attrs []byte) (bool, error) {
	params := &DriverParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Driver) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Logging
func (mg *Logging) GetTerraformResourceType() string {
	return "rancher2_cluster_logging"
}

// GetConnectionDetailsMapping for this Logging
func (tr *Logging) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"custom_target_config[*].certificate": "spec.forProvider.customTargetConfig[*].certificateSecretRef", "custom_target_config[*].client_cert": "spec.forProvider.customTargetConfig[*].clientCertSecretRef", "custom_target_config[*].client_key": "spec.forProvider.customTargetConfig[*].clientKeySecretRef", "elasticsearch_config[*].auth_password": "spec.forProvider.elasticsearchConfig[*].authPasswordSecretRef", "elasticsearch_config[*].auth_username": "spec.forProvider.elasticsearchConfig[*].authUsernameSecretRef", "elasticsearch_config[*].certificate": "spec.forProvider.elasticsearchConfig[*].certificateSecretRef", "elasticsearch_config[*].client_cert": "spec.forProvider.elasticsearchConfig[*].clientCertSecretRef", "elasticsearch_config[*].client_key": "spec.forProvider.elasticsearchConfig[*].clientKeySecretRef", "elasticsearch_config[*].client_key_pass": "spec.forProvider.elasticsearchConfig[*].clientKeyPassSecretRef", "fluentd_config[*].certificate": "spec.forProvider.fluentdConfig[*].certificateSecretRef", "fluentd_config[*].fluent_servers[*].password": "spec.forProvider.fluentdConfig[*].fluentServers[*].passwordSecretRef", "fluentd_config[*].fluent_servers[*].shared_key": "spec.forProvider.fluentdConfig[*].fluentServers[*].sharedKeySecretRef", "fluentd_config[*].fluent_servers[*].username": "spec.forProvider.fluentdConfig[*].fluentServers[*].usernameSecretRef", "kafka_config[*].certificate": "spec.forProvider.kafkaConfig[*].certificateSecretRef", "kafka_config[*].client_cert": "spec.forProvider.kafkaConfig[*].clientCertSecretRef", "kafka_config[*].client_key": "spec.forProvider.kafkaConfig[*].clientKeySecretRef", "splunk_config[*].certificate": "spec.forProvider.splunkConfig[*].certificateSecretRef", "splunk_config[*].client_cert": "spec.forProvider.splunkConfig[*].clientCertSecretRef", "splunk_config[*].client_key": "spec.forProvider.splunkConfig[*].clientKeySecretRef", "splunk_config[*].client_key_pass": "spec.forProvider.splunkConfig[*].clientKeyPassSecretRef", "splunk_config[*].token": "spec.forProvider.splunkConfig[*].tokenSecretRef", "syslog_config[*].certificate": "spec.forProvider.syslogConfig[*].certificateSecretRef", "syslog_config[*].client_cert": "spec.forProvider.syslogConfig[*].clientCertSecretRef", "syslog_config[*].client_key": "spec.forProvider.syslogConfig[*].clientKeySecretRef", "syslog_config[*].token": "spec.forProvider.syslogConfig[*].tokenSecretRef"}
}

// GetObservation of this Logging
func (tr *Logging) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Logging
func (tr *Logging) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Logging
func (tr *Logging) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Logging
func (tr *Logging) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Logging
func (tr *Logging) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Logging using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Logging) LateInitialize(attrs []byte) (bool, error) {
	params := &LoggingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Logging) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RoleTemplateBinding
func (mg *RoleTemplateBinding) GetTerraformResourceType() string {
	return "rancher2_cluster_role_template_binding"
}

// GetConnectionDetailsMapping for this RoleTemplateBinding
func (tr *RoleTemplateBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RoleTemplateBinding
func (tr *RoleTemplateBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RoleTemplateBinding
func (tr *RoleTemplateBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RoleTemplateBinding
func (tr *RoleTemplateBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RoleTemplateBinding
func (tr *RoleTemplateBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RoleTemplateBinding
func (tr *RoleTemplateBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RoleTemplateBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RoleTemplateBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &RoleTemplateBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RoleTemplateBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Sync
func (mg *Sync) GetTerraformResourceType() string {
	return "rancher2_cluster_sync"
}

// GetConnectionDetailsMapping for this Sync
func (tr *Sync) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"kube_config": "status.atProvider.kubeConfig"}
}

// GetObservation of this Sync
func (tr *Sync) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Sync
func (tr *Sync) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Sync
func (tr *Sync) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Sync
func (tr *Sync) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Sync
func (tr *Sync) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Sync using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Sync) LateInitialize(attrs []byte) (bool, error) {
	params := &SyncParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Sync) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Template
func (mg *Template) GetTerraformResourceType() string {
	return "rancher2_cluster_template"
}

// GetConnectionDetailsMapping for this Template
func (tr *Template) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"template_revisions[*].cluster_config[*].rke_config[*].bastion_host[*].ssh_key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].bastionHost[*].sshKeySecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_cert_password": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientCertPasswordSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_secret": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientSecretSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].azure_cloud_provider[*].subscription_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].azureCloudProvider[*].subscriptionIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].azure_cloud_provider[*].tenant_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].azureCloudProvider[*].tenantIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].domain_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].domainIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].password": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].passwordSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].tenant_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].tenantIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].trust_id": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].trustIdSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].username": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].usernameSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].global[*].password": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].global[*].passwordSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].global[*].user": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].global[*].userSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].virtual_center[*].password": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].virtualCenter[*].passwordSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].virtual_center[*].user": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].virtualCenter[*].userSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].nodes[*].ssh_key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].nodes[*].sshKeySecretRef", "template_revisions[*].cluster_config[*].rke_config[*].nodes[*].user": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].nodes[*].userSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].private_registries[*].ecr_credential_plugin[*].aws_secret_access_key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].privateRegistries[*].ecrCredentialPlugin[*].awsSecretAccessKeySecretRef", "template_revisions[*].cluster_config[*].rke_config[*].private_registries[*].ecr_credential_plugin[*].aws_session_token": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].privateRegistries[*].ecrCredentialPlugin[*].awsSessionTokenSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].private_registries[*].password": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].privateRegistries[*].passwordSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].private_registries[*].user": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].privateRegistries[*].userSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].services[*].etcd[*].backup_config[*].s3_backup_config[*].access_key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].services[*].etcd[*].backupConfig[*].s3BackupConfig[*].accessKeySecretRef", "template_revisions[*].cluster_config[*].rke_config[*].services[*].etcd[*].backup_config[*].s3_backup_config[*].secret_key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].services[*].etcd[*].backupConfig[*].s3BackupConfig[*].secretKeySecretRef", "template_revisions[*].cluster_config[*].rke_config[*].services[*].etcd[*].cert": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].services[*].etcd[*].certSecretRef", "template_revisions[*].cluster_config[*].rke_config[*].services[*].etcd[*].key": "spec.forProvider.templateRevisions[*].clusterConfig[*].rkeConfig[*].services[*].etcd[*].keySecretRef"}
}

// GetObservation of this Template
func (tr *Template) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Template
func (tr *Template) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Template
func (tr *Template) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Template
func (tr *Template) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Template
func (tr *Template) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Template using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Template) LateInitialize(attrs []byte) (bool, error) {
	params := &TemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Template) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this V2
func (mg *V2) GetTerraformResourceType() string {
	return "rancher2_cluster_v2"
}

// GetConnectionDetailsMapping for this V2
func (tr *V2) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"cluster_registration_token": "status.atProvider.clusterRegistrationToken", "kube_config": "status.atProvider.kubeConfig"}
}

// GetObservation of this V2
func (tr *V2) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this V2
func (tr *V2) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this V2
func (tr *V2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this V2
func (tr *V2) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this V2
func (tr *V2) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this V2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *V2) LateInitialize(attrs []byte) (bool, error) {
	params := &V2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *V2) GetTerraformSchemaVersion() int {
	return 0
}
