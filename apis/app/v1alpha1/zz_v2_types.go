/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type V2Observation struct {
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SystemDefaultRegistry *string `json:"systemDefaultRegistry,omitempty" tf:"system_default_registry,omitempty"`
}

type V2Parameters struct {

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Chart name
	// +kubebuilder:validation:Required
	ChartName *string `json:"chartName" tf:"chart_name,omitempty"`

	// Chart version
	// +kubebuilder:validation:Optional
	ChartVersion *string `json:"chartVersion,omitempty" tf:"chart_version,omitempty"`

	// Cleanup app V2 on failed chart upgrade
	// +kubebuilder:validation:Optional
	CleanupOnFail *bool `json:"cleanupOnFail,omitempty" tf:"cleanup_on_fail,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// Disable app V2 chart hooks
	// +kubebuilder:validation:Optional
	DisableHooks *bool `json:"disableHooks,omitempty" tf:"disable_hooks,omitempty"`

	// Disable app V2 Open API Validation
	// +kubebuilder:validation:Optional
	DisableOpenAPIValidation *bool `json:"disableOpenApiValidation,omitempty" tf:"disable_open_api_validation,omitempty"`

	// Force app V2 chart upgrade
	// +kubebuilder:validation:Optional
	ForceUpgrade *bool `json:"forceUpgrade,omitempty" tf:"force_upgrade,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// App v2 namespace
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// Deploy app within project ID
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Repo name
	// +kubebuilder:validation:Required
	RepoName *string `json:"repoName" tf:"repo_name,omitempty"`

	// App v2 custom values yaml
	// +kubebuilder:validation:Optional
	Values *string `json:"values,omitempty" tf:"values,omitempty"`

	// Wait until app is deployed
	// +kubebuilder:validation:Optional
	Wait *bool `json:"wait,omitempty" tf:"wait,omitempty"`
}

// V2Spec defines the desired state of V2
type V2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     V2Parameters `json:"forProvider"`
}

// V2Status defines the observed state of V2.
type V2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        V2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// V2 is the Schema for the V2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type V2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              V2Spec   `json:"spec"`
	Status            V2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// V2List contains a list of V2s
type V2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []V2 `json:"items"`
}

// Repository type metadata.
var (
	V2_Kind             = "V2"
	V2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: V2_Kind}.String()
	V2_KindAPIVersion   = V2_Kind + "." + CRDGroupVersion.String()
	V2_GroupVersionKind = CRDGroupVersion.WithKind(V2_Kind)
)

func init() {
	SchemeBuilder.Register(&V2{}, &V2List{})
}
