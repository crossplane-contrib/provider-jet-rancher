/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleBindingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoleBindingParameters struct {

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	GlobalRoleID *string `json:"globalRoleId" tf:"global_role_id,omitempty"`

	// +kubebuilder:validation:Optional
	GroupPrincipalID *string `json:"groupPrincipalId,omitempty" tf:"group_principal_id,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// RoleBindingSpec defines the desired state of RoleBinding
type RoleBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleBindingParameters `json:"forProvider"`
}

// RoleBindingStatus defines the observed state of RoleBinding.
type RoleBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoleBinding is the Schema for the RoleBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type RoleBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleBindingSpec   `json:"spec"`
	Status            RoleBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleBindingList contains a list of RoleBindings
type RoleBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleBinding `json:"items"`
}

// Repository type metadata.
var (
	RoleBinding_Kind             = "RoleBinding"
	RoleBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleBinding_Kind}.String()
	RoleBinding_KindAPIVersion   = RoleBinding_Kind + "." + CRDGroupVersion.String()
	RoleBinding_GroupVersionKind = CRDGroupVersion.WithKind(RoleBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleBinding{}, &RoleBindingList{})
}
