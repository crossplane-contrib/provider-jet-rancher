/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BootstrapObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TempTokenID *string `json:"tempTokenId,omitempty" tf:"temp_token_id,omitempty"`

	TokenID *string `json:"tokenId,omitempty" tf:"token_id,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type BootstrapParameters struct {

	// +kubebuilder:validation:Optional
	InitialPasswordSecretRef *v1.SecretKeySelector `json:"initialPasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Telemetry *bool `json:"telemetry,omitempty" tf:"telemetry,omitempty"`

	// +kubebuilder:validation:Optional
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	TokenUpdate *bool `json:"tokenUpdate,omitempty" tf:"token_update,omitempty"`

	// +kubebuilder:validation:Optional
	UIDefaultLanding *string `json:"uiDefaultLanding,omitempty" tf:"ui_default_landing,omitempty"`
}

// BootstrapSpec defines the desired state of Bootstrap
type BootstrapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BootstrapParameters `json:"forProvider"`
}

// BootstrapStatus defines the observed state of Bootstrap.
type BootstrapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BootstrapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bootstrap is the Schema for the Bootstraps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type Bootstrap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BootstrapSpec   `json:"spec"`
	Status            BootstrapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BootstrapList contains a list of Bootstraps
type BootstrapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bootstrap `json:"items"`
}

// Repository type metadata.
var (
	Bootstrap_Kind             = "Bootstrap"
	Bootstrap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bootstrap_Kind}.String()
	Bootstrap_KindAPIVersion   = Bootstrap_Kind + "." + CRDGroupVersion.String()
	Bootstrap_GroupVersionKind = CRDGroupVersion.WithKind(Bootstrap_Kind)
)

func init() {
	SchemeBuilder.Register(&Bootstrap{}, &BootstrapList{})
}
