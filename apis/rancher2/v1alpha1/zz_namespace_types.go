/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerResourceLimitObservation struct {
}

type ContainerResourceLimitParameters struct {

	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`
}

type LimitObservation struct {
}

type LimitParameters struct {

	// +kubebuilder:validation:Optional
	ConfigMaps *string `json:"configMaps,omitempty" tf:"config_maps,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// +kubebuilder:validation:Optional
	PersistentVolumeClaims *string `json:"persistentVolumeClaims,omitempty" tf:"persistent_volume_claims,omitempty"`

	// +kubebuilder:validation:Optional
	Pods *string `json:"pods,omitempty" tf:"pods,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationControllers *string `json:"replicationControllers,omitempty" tf:"replication_controllers,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsStorage *string `json:"requestsStorage,omitempty" tf:"requests_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Secrets *string `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// +kubebuilder:validation:Optional
	Services *string `json:"services,omitempty" tf:"services,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesLoadBalancers *string `json:"servicesLoadBalancers,omitempty" tf:"services_load_balancers,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesNodePorts *string `json:"servicesNodePorts,omitempty" tf:"services_node_ports,omitempty"`
}

type NamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NamespaceParameters struct {

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	ContainerResourceLimit []ContainerResourceLimitParameters `json:"containerResourceLimit,omitempty" tf:"container_resource_limit,omitempty"`

	// Description of the k8s namespace managed by rancher v2
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Project ID where k8s namespace belongs
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceQuota []ResourceQuotaParameters `json:"resourceQuota,omitempty" tf:"resource_quota,omitempty"`

	// Wait for cluster becomes active
	// +kubebuilder:validation:Optional
	WaitForCluster *bool `json:"waitForCluster,omitempty" tf:"wait_for_cluster,omitempty"`
}

type ResourceQuotaObservation struct {
}

type ResourceQuotaParameters struct {

	// +kubebuilder:validation:Required
	Limit []LimitParameters `json:"limit" tf:"limit,omitempty"`
}

// NamespaceSpec defines the desired state of Namespace
type NamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceParameters `json:"forProvider"`
}

// NamespaceStatus defines the observed state of Namespace.
type NamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Namespace is the Schema for the Namespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type Namespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceSpec   `json:"spec"`
	Status            NamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceList contains a list of Namespaces
type NamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Namespace `json:"items"`
}

// Repository type metadata.
var (
	Namespace_Kind             = "Namespace"
	Namespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Namespace_Kind}.String()
	Namespace_KindAPIVersion   = Namespace_Kind + "." + CRDGroupVersion.String()
	Namespace_GroupVersionKind = CRDGroupVersion.WithKind(Namespace_Kind)
)

func init() {
	SchemeBuilder.Register(&Namespace{}, &NamespaceList{})
}
