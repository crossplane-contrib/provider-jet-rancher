/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this App
func (mg *App) GetTerraformResourceType() string {
	return "rancher2_app"
}

// GetConnectionDetailsMapping for this App
func (tr *App) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this App
func (tr *App) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this App
func (tr *App) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this App
func (tr *App) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this App
func (tr *App) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this App
func (tr *App) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this App using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *App) LateInitialize(attrs []byte) (bool, error) {
	params := &AppParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *App) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Bootstrap
func (mg *Bootstrap) GetTerraformResourceType() string {
	return "rancher2_bootstrap"
}

// GetConnectionDetailsMapping for this Bootstrap
func (tr *Bootstrap) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"current_password": "status.atProvider.currentPassword", "initial_password": "spec.forProvider.initialPasswordSecretRef", "password": "spec.forProvider.passwordSecretRef", "temp_token": "status.atProvider.tempToken", "token": "status.atProvider.token"}
}

// GetObservation of this Bootstrap
func (tr *Bootstrap) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Bootstrap
func (tr *Bootstrap) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Bootstrap
func (tr *Bootstrap) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Bootstrap
func (tr *Bootstrap) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Bootstrap
func (tr *Bootstrap) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Bootstrap using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Bootstrap) LateInitialize(attrs []byte) (bool, error) {
	params := &BootstrapParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Bootstrap) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Catalog
func (mg *Catalog) GetTerraformResourceType() string {
	return "rancher2_catalog"
}

// GetConnectionDetailsMapping for this Catalog
func (tr *Catalog) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef", "username": "spec.forProvider.usernameSecretRef"}
}

// GetObservation of this Catalog
func (tr *Catalog) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Catalog
func (tr *Catalog) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Catalog
func (tr *Catalog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Catalog
func (tr *Catalog) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Catalog
func (tr *Catalog) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Catalog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Catalog) LateInitialize(attrs []byte) (bool, error) {
	params := &CatalogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Catalog) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Certificate
func (mg *Certificate) GetTerraformResourceType() string {
	return "rancher2_certificate"
}

// GetConnectionDetailsMapping for this Certificate
func (tr *Certificate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"key": "spec.forProvider.keySecretRef"}
}

// GetObservation of this Certificate
func (tr *Certificate) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Certificate
func (tr *Certificate) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Certificate
func (tr *Certificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Certificate
func (tr *Certificate) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Certificate
func (tr *Certificate) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Certificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Certificate) LateInitialize(attrs []byte) (bool, error) {
	params := &CertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Certificate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Cluster
func (mg *Cluster) GetTerraformResourceType() string {
	return "rancher2_cluster"
}

// GetConnectionDetailsMapping for this Cluster
func (tr *Cluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"aks_config[*].aad_server_app_secret": "spec.forProvider.aksConfig[*].aadServerAppSecretSecretRef", "aks_config[*].aad_tenant_id": "spec.forProvider.aksConfig[*].aadTenantIdSecretRef", "aks_config[*].add_client_app_id": "spec.forProvider.aksConfig[*].addClientAppIdSecretRef", "aks_config[*].add_server_app_id": "spec.forProvider.aksConfig[*].addServerAppIdSecretRef", "aks_config[*].client_id": "spec.forProvider.aksConfig[*].clientIdSecretRef", "aks_config[*].client_secret": "spec.forProvider.aksConfig[*].clientSecretSecretRef", "ca_cert": "status.atProvider.caCert", "eks_config[*].access_key": "spec.forProvider.eksConfig[*].accessKeySecretRef", "eks_config[*].secret_key": "spec.forProvider.eksConfig[*].secretKeySecretRef", "eks_config[*].session_token": "spec.forProvider.eksConfig[*].sessionTokenSecretRef", "gke_config[*].credential": "spec.forProvider.gkeConfig[*].credentialSecretRef", "gke_config_v2[*].google_credential_secret": "spec.forProvider.gkeConfigV2[*].googleCredentialSecretSecretRef", "kube_config": "status.atProvider.kubeConfig", "oke_config[*].kms_key_id": "spec.forProvider.okeConfig[*].kmsKeyIdSecretRef", "oke_config[*].private_key_contents": "spec.forProvider.okeConfig[*].privateKeyContentsSecretRef", "oke_config[*].private_key_passphrase": "spec.forProvider.okeConfig[*].privateKeyPassphraseSecretRef", "rke_config[*].bastion_host[*].ssh_key": "spec.forProvider.rkeConfig[*].bastionHost[*].sshKeySecretRef", "rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_cert_password": "spec.forProvider.rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientCertPasswordSecretRef", "rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientIdSecretRef", "rke_config[*].cloud_provider[*].azure_cloud_provider[*].aad_client_secret": "spec.forProvider.rkeConfig[*].cloudProvider[*].azureCloudProvider[*].aadClientSecretSecretRef", "rke_config[*].cloud_provider[*].azure_cloud_provider[*].subscription_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].azureCloudProvider[*].subscriptionIdSecretRef", "rke_config[*].cloud_provider[*].azure_cloud_provider[*].tenant_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].azureCloudProvider[*].tenantIdSecretRef", "rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].domain_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].domainIdSecretRef", "rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].password": "spec.forProvider.rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].passwordSecretRef", "rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].tenant_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].tenantIdSecretRef", "rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].trust_id": "spec.forProvider.rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].trustIdSecretRef", "rke_config[*].cloud_provider[*].openstack_cloud_provider[*].global[*].username": "spec.forProvider.rkeConfig[*].cloudProvider[*].openstackCloudProvider[*].global[*].usernameSecretRef", "rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].global[*].password": "spec.forProvider.rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].global[*].passwordSecretRef", "rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].global[*].user": "spec.forProvider.rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].global[*].userSecretRef", "rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].virtual_center[*].password": "spec.forProvider.rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].virtualCenter[*].passwordSecretRef", "rke_config[*].cloud_provider[*].vsphere_cloud_provider[*].virtual_center[*].user": "spec.forProvider.rkeConfig[*].cloudProvider[*].vsphereCloudProvider[*].virtualCenter[*].userSecretRef", "rke_config[*].nodes[*].ssh_key": "spec.forProvider.rkeConfig[*].nodes[*].sshKeySecretRef", "rke_config[*].nodes[*].user": "spec.forProvider.rkeConfig[*].nodes[*].userSecretRef", "rke_config[*].private_registries[*].ecr_credential_plugin[*].aws_secret_access_key": "spec.forProvider.rkeConfig[*].privateRegistries[*].ecrCredentialPlugin[*].awsSecretAccessKeySecretRef", "rke_config[*].private_registries[*].ecr_credential_plugin[*].aws_session_token": "spec.forProvider.rkeConfig[*].privateRegistries[*].ecrCredentialPlugin[*].awsSessionTokenSecretRef", "rke_config[*].private_registries[*].password": "spec.forProvider.rkeConfig[*].privateRegistries[*].passwordSecretRef", "rke_config[*].private_registries[*].user": "spec.forProvider.rkeConfig[*].privateRegistries[*].userSecretRef", "rke_config[*].services[*].etcd[*].backup_config[*].s3_backup_config[*].access_key": "spec.forProvider.rkeConfig[*].services[*].etcd[*].backupConfig[*].s3BackupConfig[*].accessKeySecretRef", "rke_config[*].services[*].etcd[*].backup_config[*].s3_backup_config[*].secret_key": "spec.forProvider.rkeConfig[*].services[*].etcd[*].backupConfig[*].s3BackupConfig[*].secretKeySecretRef", "rke_config[*].services[*].etcd[*].cert": "spec.forProvider.rkeConfig[*].services[*].etcd[*].certSecretRef", "rke_config[*].services[*].etcd[*].key": "spec.forProvider.rkeConfig[*].services[*].etcd[*].keySecretRef"}
}

// GetObservation of this Cluster
func (tr *Cluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Cluster
func (tr *Cluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Cluster
func (tr *Cluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Cluster
func (tr *Cluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Cluster
func (tr *Cluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Cluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Cluster) LateInitialize(attrs []byte) (bool, error) {
	params := &ClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Cluster) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this Feature
func (mg *Feature) GetTerraformResourceType() string {
	return "rancher2_feature"
}

// GetConnectionDetailsMapping for this Feature
func (tr *Feature) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Feature
func (tr *Feature) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Feature
func (tr *Feature) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Feature
func (tr *Feature) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Feature
func (tr *Feature) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Feature
func (tr *Feature) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Feature using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Feature) LateInitialize(attrs []byte) (bool, error) {
	params := &FeatureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Feature) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Namespace
func (mg *Namespace) GetTerraformResourceType() string {
	return "rancher2_namespace"
}

// GetConnectionDetailsMapping for this Namespace
func (tr *Namespace) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Namespace
func (tr *Namespace) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Namespace
func (tr *Namespace) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Namespace
func (tr *Namespace) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Namespace
func (tr *Namespace) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Namespace
func (tr *Namespace) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Namespace using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Namespace) LateInitialize(attrs []byte) (bool, error) {
	params := &NamespaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Namespace) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Notifier
func (mg *Notifier) GetTerraformResourceType() string {
	return "rancher2_notifier"
}

// GetConnectionDetailsMapping for this Notifier
func (tr *Notifier) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"dingtalk_config[*].secret": "spec.forProvider.dingtalkConfig[*].secretSecretRef", "smtp_config[*].password": "spec.forProvider.smtpConfig[*].passwordSecretRef", "wechat_config[*].secret": "spec.forProvider.wechatConfig[*].secretSecretRef"}
}

// GetObservation of this Notifier
func (tr *Notifier) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Notifier
func (tr *Notifier) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Notifier
func (tr *Notifier) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Notifier
func (tr *Notifier) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Notifier
func (tr *Notifier) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Notifier using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Notifier) LateInitialize(attrs []byte) (bool, error) {
	params := &NotifierParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Notifier) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Project
func (mg *Project) GetTerraformResourceType() string {
	return "rancher2_project"
}

// GetConnectionDetailsMapping for this Project
func (tr *Project) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Project
func (tr *Project) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Project
func (tr *Project) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Project
func (tr *Project) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Project
func (tr *Project) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Project
func (tr *Project) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Project using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Project) LateInitialize(attrs []byte) (bool, error) {
	params := &ProjectParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Project) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Registry
func (mg *Registry) GetTerraformResourceType() string {
	return "rancher2_registry"
}

// GetConnectionDetailsMapping for this Registry
func (tr *Registry) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"registries[*].password": "spec.forProvider.registries[*].passwordSecretRef"}
}

// GetObservation of this Registry
func (tr *Registry) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Registry
func (tr *Registry) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Registry
func (tr *Registry) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Registry
func (tr *Registry) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Registry
func (tr *Registry) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Registry using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Registry) LateInitialize(attrs []byte) (bool, error) {
	params := &RegistryParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Registry) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Setting
func (mg *Setting) GetTerraformResourceType() string {
	return "rancher2_setting"
}

// GetConnectionDetailsMapping for this Setting
func (tr *Setting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Setting
func (tr *Setting) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Setting
func (tr *Setting) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Setting
func (tr *Setting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Setting
func (tr *Setting) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Setting
func (tr *Setting) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Setting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Setting) LateInitialize(attrs []byte) (bool, error) {
	params := &SettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Setting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Token
func (mg *Token) GetTerraformResourceType() string {
	return "rancher2_token"
}

// GetConnectionDetailsMapping for this Token
func (tr *Token) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"secret_key": "status.atProvider.secretKey", "token": "status.atProvider.token"}
}

// GetObservation of this Token
func (tr *Token) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Token
func (tr *Token) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Token
func (tr *Token) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Token
func (tr *Token) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Token
func (tr *Token) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Token using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Token) LateInitialize(attrs []byte) (bool, error) {
	params := &TokenParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Token) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this User
func (mg *User) GetTerraformResourceType() string {
	return "rancher2_user"
}

// GetConnectionDetailsMapping for this User
func (tr *User) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this User
func (tr *User) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this User
func (tr *User) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this User
func (tr *User) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this User
func (tr *User) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this User
func (tr *User) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this User using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *User) LateInitialize(attrs []byte) (bool, error) {
	params := &UserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *User) GetTerraformSchemaVersion() int {
	return 0
}
