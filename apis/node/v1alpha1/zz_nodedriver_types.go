/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeDriverObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NodeDriverParameters struct {

	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	Builtin *bool `json:"builtin" tf:"builtin,omitempty"`

	// +kubebuilder:validation:Optional
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	UIURL *string `json:"uiUrl,omitempty" tf:"ui_url,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	WhitelistDomains []*string `json:"whitelistDomains,omitempty" tf:"whitelist_domains,omitempty"`
}

// NodeDriverSpec defines the desired state of NodeDriver
type NodeDriverSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeDriverParameters `json:"forProvider"`
}

// NodeDriverStatus defines the observed state of NodeDriver.
type NodeDriverStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeDriverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodeDriver is the Schema for the NodeDrivers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type NodeDriver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeDriverSpec   `json:"spec"`
	Status            NodeDriverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeDriverList contains a list of NodeDrivers
type NodeDriverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeDriver `json:"items"`
}

// Repository type metadata.
var (
	NodeDriver_Kind             = "NodeDriver"
	NodeDriver_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeDriver_Kind}.String()
	NodeDriver_KindAPIVersion   = NodeDriver_Kind + "." + CRDGroupVersion.String()
	NodeDriver_GroupVersionKind = CRDGroupVersion.WithKind(NodeDriver_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeDriver{}, &NodeDriverList{})
}
