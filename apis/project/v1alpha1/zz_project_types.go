/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceDefaultLimitObservation struct {
}

type NamespaceDefaultLimitParameters struct {

	// +kubebuilder:validation:Optional
	ConfigMaps *string `json:"configMaps,omitempty" tf:"config_maps,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// +kubebuilder:validation:Optional
	PersistentVolumeClaims *string `json:"persistentVolumeClaims,omitempty" tf:"persistent_volume_claims,omitempty"`

	// +kubebuilder:validation:Optional
	Pods *string `json:"pods,omitempty" tf:"pods,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationControllers *string `json:"replicationControllers,omitempty" tf:"replication_controllers,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsStorage *string `json:"requestsStorage,omitempty" tf:"requests_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Secrets *string `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// +kubebuilder:validation:Optional
	Services *string `json:"services,omitempty" tf:"services,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesLoadBalancers *string `json:"servicesLoadBalancers,omitempty" tf:"services_load_balancers,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesNodePorts *string `json:"servicesNodePorts,omitempty" tf:"services_node_ports,omitempty"`
}

type ProjectContainerResourceLimitObservation struct {
}

type ProjectContainerResourceLimitParameters struct {

	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`
}

type ProjectLimitObservation struct {
}

type ProjectLimitParameters struct {

	// +kubebuilder:validation:Optional
	ConfigMaps *string `json:"configMaps,omitempty" tf:"config_maps,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsCPU *string `json:"limitsCpu,omitempty" tf:"limits_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	LimitsMemory *string `json:"limitsMemory,omitempty" tf:"limits_memory,omitempty"`

	// +kubebuilder:validation:Optional
	PersistentVolumeClaims *string `json:"persistentVolumeClaims,omitempty" tf:"persistent_volume_claims,omitempty"`

	// +kubebuilder:validation:Optional
	Pods *string `json:"pods,omitempty" tf:"pods,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicationControllers *string `json:"replicationControllers,omitempty" tf:"replication_controllers,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsCPU *string `json:"requestsCpu,omitempty" tf:"requests_cpu,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsMemory *string `json:"requestsMemory,omitempty" tf:"requests_memory,omitempty"`

	// +kubebuilder:validation:Optional
	RequestsStorage *string `json:"requestsStorage,omitempty" tf:"requests_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Secrets *string `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// +kubebuilder:validation:Optional
	Services *string `json:"services,omitempty" tf:"services,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesLoadBalancers *string `json:"servicesLoadBalancers,omitempty" tf:"services_load_balancers,omitempty"`

	// +kubebuilder:validation:Optional
	ServicesNodePorts *string `json:"servicesNodePorts,omitempty" tf:"services_node_ports,omitempty"`
}

type ProjectMonitoringInputObservation struct {
}

type ProjectMonitoringInputParameters struct {

	// Answers for monitor input
	// +kubebuilder:validation:Optional
	Answers map[string]*string `json:"answers,omitempty" tf:"answers,omitempty"`

	// Monitoring version
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ProjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProjectParameters struct {

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-rancher/apis/cluster/v1alpha2.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ContainerResourceLimit []ProjectContainerResourceLimitParameters `json:"containerResourceLimit,omitempty" tf:"container_resource_limit,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable built-in project monitoring
	// +kubebuilder:validation:Optional
	EnableProjectMonitoring *bool `json:"enableProjectMonitoring,omitempty" tf:"enable_project_monitoring,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PodSecurityPolicyTemplateID *string `json:"podSecurityPolicyTemplateId,omitempty" tf:"pod_security_policy_template_id,omitempty"`

	// Cluster monitoring configuration
	// +kubebuilder:validation:Optional
	ProjectMonitoringInput []ProjectMonitoringInputParameters `json:"projectMonitoringInput,omitempty" tf:"project_monitoring_input,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceQuota []ProjectResourceQuotaParameters `json:"resourceQuota,omitempty" tf:"resource_quota,omitempty"`

	// Wait for cluster becomes active
	// +kubebuilder:validation:Optional
	WaitForCluster *bool `json:"waitForCluster,omitempty" tf:"wait_for_cluster,omitempty"`
}

type ProjectResourceQuotaObservation struct {
}

type ProjectResourceQuotaParameters struct {

	// +kubebuilder:validation:Required
	NamespaceDefaultLimit []NamespaceDefaultLimitParameters `json:"namespaceDefaultLimit" tf:"namespace_default_limit,omitempty"`

	// +kubebuilder:validation:Required
	ProjectLimit []ProjectLimitParameters `json:"projectLimit" tf:"project_limit,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSpec   `json:"spec"`
	Status            ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
