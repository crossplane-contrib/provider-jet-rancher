/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FeatureObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FeatureParameters struct {

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Value *bool `json:"value,omitempty" tf:"value,omitempty"`
}

// FeatureSpec defines the desired state of Feature
type FeatureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeatureParameters `json:"forProvider"`
}

// FeatureStatus defines the observed state of Feature.
type FeatureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeatureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Feature is the Schema for the Features API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type Feature struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FeatureSpec   `json:"spec"`
	Status            FeatureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeatureList contains a list of Features
type FeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Feature `json:"items"`
}

// Repository type metadata.
var (
	Feature_Kind             = "Feature"
	Feature_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Feature_Kind}.String()
	Feature_KindAPIVersion   = Feature_Kind + "." + CRDGroupVersion.String()
	Feature_GroupVersionKind = CRDGroupVersion.WithKind(Feature_Kind)
)

func init() {
	SchemeBuilder.Register(&Feature{}, &FeatureList{})
}
