/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this CloudCredential
func (mg *CloudCredential) GetTerraformResourceType() string {
	return "rancher2_cloud_credential"
}

// GetConnectionDetailsMapping for this CloudCredential
func (tr *CloudCredential) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"amazonec2_credential_config[*].access_key": "spec.forProvider.amazonec2CredentialConfig[*].accessKeySecretRef", "amazonec2_credential_config[*].secret_key": "spec.forProvider.amazonec2CredentialConfig[*].secretKeySecretRef", "azure_credential_config[*].client_id": "spec.forProvider.azureCredentialConfig[*].clientIdSecretRef", "azure_credential_config[*].client_secret": "spec.forProvider.azureCredentialConfig[*].clientSecretSecretRef", "azure_credential_config[*].subscription_id": "spec.forProvider.azureCredentialConfig[*].subscriptionIdSecretRef", "digitalocean_credential_config[*].access_token": "spec.forProvider.digitaloceanCredentialConfig[*].accessTokenSecretRef", "google_credential_config[*].auth_encoded_json": "spec.forProvider.googleCredentialConfig[*].authEncodedJsonSecretRef", "harvester_credential_config[*].kubeconfig_content": "spec.forProvider.harvesterCredentialConfig[*].kubeconfigContentSecretRef", "linode_credential_config[*].token": "spec.forProvider.linodeCredentialConfig[*].tokenSecretRef", "openstack_credential_config[*].password": "spec.forProvider.openstackCredentialConfig[*].passwordSecretRef", "s3_credential_config[*].access_key": "spec.forProvider.s3CredentialConfig[*].accessKeySecretRef", "s3_credential_config[*].default_endpoint_ca": "spec.forProvider.s3CredentialConfig[*].defaultEndpointCaSecretRef", "s3_credential_config[*].secret_key": "spec.forProvider.s3CredentialConfig[*].secretKeySecretRef", "vsphere_credential_config[*].password": "spec.forProvider.vsphereCredentialConfig[*].passwordSecretRef"}
}

// GetObservation of this CloudCredential
func (tr *CloudCredential) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CloudCredential
func (tr *CloudCredential) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CloudCredential
func (tr *CloudCredential) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CloudCredential
func (tr *CloudCredential) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CloudCredential
func (tr *CloudCredential) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CloudCredential using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CloudCredential) LateInitialize(attrs []byte) (bool, error) {
	params := &CloudCredentialParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CloudCredential) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Feature
func (mg *Feature) GetTerraformResourceType() string {
	return "rancher2_feature"
}

// GetConnectionDetailsMapping for this Feature
func (tr *Feature) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Feature
func (tr *Feature) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Feature
func (tr *Feature) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Feature
func (tr *Feature) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Feature
func (tr *Feature) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Feature
func (tr *Feature) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Feature using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Feature) LateInitialize(attrs []byte) (bool, error) {
	params := &FeatureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Feature) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MachineConfig
func (mg *MachineConfig) GetTerraformResourceType() string {
	return "rancher2_machine_config_v2"
}

// GetConnectionDetailsMapping for this MachineConfig
func (tr *MachineConfig) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"amazonec2_config[*].access_key": "spec.forProvider.amazonec2Config[*].accessKeySecretRef", "amazonec2_config[*].secret_key": "spec.forProvider.amazonec2Config[*].secretKeySecretRef", "amazonec2_config[*].session_token": "spec.forProvider.amazonec2Config[*].sessionTokenSecretRef", "amazonec2_config[*].ssh_key_contents": "spec.forProvider.amazonec2Config[*].sshKeyContentsSecretRef", "azure_config[*].client_id": "spec.forProvider.azureConfig[*].clientIdSecretRef", "azure_config[*].client_secret": "spec.forProvider.azureConfig[*].clientSecretSecretRef", "azure_config[*].subscription_id": "spec.forProvider.azureConfig[*].subscriptionIdSecretRef", "azure_config[*].tenant_id": "spec.forProvider.azureConfig[*].tenantIdSecretRef", "digitalocean_config[*].access_token": "spec.forProvider.digitaloceanConfig[*].accessTokenSecretRef", "digitalocean_config[*].ssh_key_contents": "spec.forProvider.digitaloceanConfig[*].sshKeyContentsSecretRef", "digitalocean_config[*].ssh_key_fingerprint": "spec.forProvider.digitaloceanConfig[*].sshKeyFingerprintSecretRef", "harvester_config[*].ssh_password": "spec.forProvider.harvesterConfig[*].sshPasswordSecretRef", "linode_config[*].root_pass": "spec.forProvider.linodeConfig[*].rootPassSecretRef", "linode_config[*].token": "spec.forProvider.linodeConfig[*].tokenSecretRef", "openstack_config[*].application_credential_secret": "spec.forProvider.openstackConfig[*].applicationCredentialSecretSecretRef", "openstack_config[*].password": "spec.forProvider.openstackConfig[*].passwordSecretRef", "openstack_config[*].private_key_file": "spec.forProvider.openstackConfig[*].privateKeyFileSecretRef", "vsphere_config[*].password": "spec.forProvider.vsphereConfig[*].passwordSecretRef", "vsphere_config[*].ssh_password": "spec.forProvider.vsphereConfig[*].sshPasswordSecretRef"}
}

// GetObservation of this MachineConfig
func (tr *MachineConfig) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MachineConfig
func (tr *MachineConfig) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MachineConfig
func (tr *MachineConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MachineConfig
func (tr *MachineConfig) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MachineConfig
func (tr *MachineConfig) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MachineConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MachineConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &MachineConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MachineConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RoleTemplate
func (mg *RoleTemplate) GetTerraformResourceType() string {
	return "rancher2_role_template"
}

// GetConnectionDetailsMapping for this RoleTemplate
func (tr *RoleTemplate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RoleTemplate
func (tr *RoleTemplate) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RoleTemplate
func (tr *RoleTemplate) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RoleTemplate
func (tr *RoleTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RoleTemplate
func (tr *RoleTemplate) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RoleTemplate
func (tr *RoleTemplate) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RoleTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RoleTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &RoleTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RoleTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Setting
func (mg *Setting) GetTerraformResourceType() string {
	return "rancher2_setting"
}

// GetConnectionDetailsMapping for this Setting
func (tr *Setting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Setting
func (tr *Setting) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Setting
func (tr *Setting) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Setting
func (tr *Setting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Setting
func (tr *Setting) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Setting
func (tr *Setting) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Setting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Setting) LateInitialize(attrs []byte) (bool, error) {
	params := &SettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Setting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this User
func (mg *User) GetTerraformResourceType() string {
	return "rancher2_user"
}

// GetConnectionDetailsMapping for this User
func (tr *User) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this User
func (tr *User) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this User
func (tr *User) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this User
func (tr *User) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this User
func (tr *User) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this User
func (tr *User) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this User using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *User) LateInitialize(attrs []byte) (bool, error) {
	params := &UserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *User) GetTerraformSchemaVersion() int {
	return 0
}
