/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigAzureadObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigAzureadParameters struct {

	// +kubebuilder:validation:Optional
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode,omitempty"`

	// +kubebuilder:validation:Optional
	AllowedPrincipalIds []*string `json:"allowedPrincipalIds,omitempty" tf:"allowed_principal_ids,omitempty"`

	// Annotations of the resource
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	ApplicationIDSecretRef v1.SecretKeySelector `json:"applicationIdSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ApplicationSecretSecretRef v1.SecretKeySelector `json:"applicationSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	AuthEndpoint *string `json:"authEndpoint" tf:"auth_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Required
	GraphEndpoint *string `json:"graphEndpoint" tf:"graph_endpoint,omitempty"`

	// Labels of the resource
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	RancherURL *string `json:"rancherUrl" tf:"rancher_url,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Required
	TokenEndpoint *string `json:"tokenEndpoint" tf:"token_endpoint,omitempty"`
}

// ConfigAzureadSpec defines the desired state of ConfigAzuread
type ConfigAzureadSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigAzureadParameters `json:"forProvider"`
}

// ConfigAzureadStatus defines the observed state of ConfigAzuread.
type ConfigAzureadStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigAzureadObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAzuread is the Schema for the ConfigAzureads API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancherjet}
type ConfigAzuread struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigAzureadSpec   `json:"spec"`
	Status            ConfigAzureadStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAzureadList contains a list of ConfigAzureads
type ConfigAzureadList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigAzuread `json:"items"`
}

// Repository type metadata.
var (
	ConfigAzuread_Kind             = "ConfigAzuread"
	ConfigAzuread_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigAzuread_Kind}.String()
	ConfigAzuread_KindAPIVersion   = ConfigAzuread_Kind + "." + CRDGroupVersion.String()
	ConfigAzuread_GroupVersionKind = CRDGroupVersion.WithKind(ConfigAzuread_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigAzuread{}, &ConfigAzureadList{})
}
