//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectory) DeepCopyInto(out *ConfigActivedirectory) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectory.
func (in *ConfigActivedirectory) DeepCopy() *ConfigActivedirectory {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigActivedirectory) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectoryList) DeepCopyInto(out *ConfigActivedirectoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigActivedirectory, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectoryList.
func (in *ConfigActivedirectoryList) DeepCopy() *ConfigActivedirectoryList {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigActivedirectoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectoryObservation) DeepCopyInto(out *ConfigActivedirectoryObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectoryObservation.
func (in *ConfigActivedirectoryObservation) DeepCopy() *ConfigActivedirectoryObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectoryParameters) DeepCopyInto(out *ConfigActivedirectoryParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CertificateSecretRef != nil {
		in, out := &in.CertificateSecretRef, &out.CertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ConnectionTimeout != nil {
		in, out := &in.ConnectionTimeout, &out.ConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DefaultLoginDomain != nil {
		in, out := &in.DefaultLoginDomain, &out.DefaultLoginDomain
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupDnAttribute != nil {
		in, out := &in.GroupDnAttribute, &out.GroupDnAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberMappingAttribute != nil {
		in, out := &in.GroupMemberMappingAttribute, &out.GroupMemberMappingAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberUserAttribute != nil {
		in, out := &in.GroupMemberUserAttribute, &out.GroupMemberUserAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupNameAttribute != nil {
		in, out := &in.GroupNameAttribute, &out.GroupNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupObjectClass != nil {
		in, out := &in.GroupObjectClass, &out.GroupObjectClass
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchAttribute != nil {
		in, out := &in.GroupSearchAttribute, &out.GroupSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchBase != nil {
		in, out := &in.GroupSearchBase, &out.GroupSearchBase
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchFilter != nil {
		in, out := &in.GroupSearchFilter, &out.GroupSearchFilter
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NestedGroupMembershipEnabled != nil {
		in, out := &in.NestedGroupMembershipEnabled, &out.NestedGroupMembershipEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.ServiceAccountPasswordSecretRef = in.ServiceAccountPasswordSecretRef
	out.ServiceAccountUsernameSecretRef = in.ServiceAccountUsernameSecretRef
	if in.StartTLS != nil {
		in, out := &in.StartTLS, &out.StartTLS
		*out = new(bool)
		**out = **in
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	out.TestPasswordSecretRef = in.TestPasswordSecretRef
	if in.TestUsername != nil {
		in, out := &in.TestUsername, &out.TestUsername
		*out = new(string)
		**out = **in
	}
	if in.UserDisabledBitMask != nil {
		in, out := &in.UserDisabledBitMask, &out.UserDisabledBitMask
		*out = new(float64)
		**out = **in
	}
	if in.UserEnabledAttribute != nil {
		in, out := &in.UserEnabledAttribute, &out.UserEnabledAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserLoginAttribute != nil {
		in, out := &in.UserLoginAttribute, &out.UserLoginAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserNameAttribute != nil {
		in, out := &in.UserNameAttribute, &out.UserNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserObjectClass != nil {
		in, out := &in.UserObjectClass, &out.UserObjectClass
		*out = new(string)
		**out = **in
	}
	if in.UserSearchAttribute != nil {
		in, out := &in.UserSearchAttribute, &out.UserSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserSearchBase != nil {
		in, out := &in.UserSearchBase, &out.UserSearchBase
		*out = new(string)
		**out = **in
	}
	if in.UserSearchFilter != nil {
		in, out := &in.UserSearchFilter, &out.UserSearchFilter
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectoryParameters.
func (in *ConfigActivedirectoryParameters) DeepCopy() *ConfigActivedirectoryParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectorySpec) DeepCopyInto(out *ConfigActivedirectorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectorySpec.
func (in *ConfigActivedirectorySpec) DeepCopy() *ConfigActivedirectorySpec {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigActivedirectoryStatus) DeepCopyInto(out *ConfigActivedirectoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigActivedirectoryStatus.
func (in *ConfigActivedirectoryStatus) DeepCopy() *ConfigActivedirectoryStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigActivedirectoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfs) DeepCopyInto(out *ConfigAdfs) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfs.
func (in *ConfigAdfs) DeepCopy() *ConfigAdfs {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigAdfs) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfsList) DeepCopyInto(out *ConfigAdfsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigAdfs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfsList.
func (in *ConfigAdfsList) DeepCopy() *ConfigAdfsList {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigAdfsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfsObservation) DeepCopyInto(out *ConfigAdfsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfsObservation.
func (in *ConfigAdfsObservation) DeepCopy() *ConfigAdfsObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfsParameters) DeepCopyInto(out *ConfigAdfsParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayNameField != nil {
		in, out := &in.DisplayNameField, &out.DisplayNameField
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupsField != nil {
		in, out := &in.GroupsField, &out.GroupsField
		*out = new(string)
		**out = **in
	}
	out.IdpMetadataContentSecretRef = in.IdpMetadataContentSecretRef
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RancherAPIHost != nil {
		in, out := &in.RancherAPIHost, &out.RancherAPIHost
		*out = new(string)
		**out = **in
	}
	out.SpCertSecretRef = in.SpCertSecretRef
	out.SpKeySecretRef = in.SpKeySecretRef
	if in.UIDField != nil {
		in, out := &in.UIDField, &out.UIDField
		*out = new(string)
		**out = **in
	}
	if in.UserNameField != nil {
		in, out := &in.UserNameField, &out.UserNameField
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfsParameters.
func (in *ConfigAdfsParameters) DeepCopy() *ConfigAdfsParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfsSpec) DeepCopyInto(out *ConfigAdfsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfsSpec.
func (in *ConfigAdfsSpec) DeepCopy() *ConfigAdfsSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAdfsStatus) DeepCopyInto(out *ConfigAdfsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAdfsStatus.
func (in *ConfigAdfsStatus) DeepCopy() *ConfigAdfsStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigAdfsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzuread) DeepCopyInto(out *ConfigAzuread) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzuread.
func (in *ConfigAzuread) DeepCopy() *ConfigAzuread {
	if in == nil {
		return nil
	}
	out := new(ConfigAzuread)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigAzuread) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzureadList) DeepCopyInto(out *ConfigAzureadList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigAzuread, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzureadList.
func (in *ConfigAzureadList) DeepCopy() *ConfigAzureadList {
	if in == nil {
		return nil
	}
	out := new(ConfigAzureadList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigAzureadList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzureadObservation) DeepCopyInto(out *ConfigAzureadObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzureadObservation.
func (in *ConfigAzureadObservation) DeepCopy() *ConfigAzureadObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigAzureadObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzureadParameters) DeepCopyInto(out *ConfigAzureadParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	out.ApplicationIDSecretRef = in.ApplicationIDSecretRef
	out.ApplicationSecretSecretRef = in.ApplicationSecretSecretRef
	if in.AuthEndpoint != nil {
		in, out := &in.AuthEndpoint, &out.AuthEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.GraphEndpoint != nil {
		in, out := &in.GraphEndpoint, &out.GraphEndpoint
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RancherURL != nil {
		in, out := &in.RancherURL, &out.RancherURL
		*out = new(string)
		**out = **in
	}
	if in.TenantID != nil {
		in, out := &in.TenantID, &out.TenantID
		*out = new(string)
		**out = **in
	}
	if in.TokenEndpoint != nil {
		in, out := &in.TokenEndpoint, &out.TokenEndpoint
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzureadParameters.
func (in *ConfigAzureadParameters) DeepCopy() *ConfigAzureadParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigAzureadParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzureadSpec) DeepCopyInto(out *ConfigAzureadSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzureadSpec.
func (in *ConfigAzureadSpec) DeepCopy() *ConfigAzureadSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigAzureadSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAzureadStatus) DeepCopyInto(out *ConfigAzureadStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAzureadStatus.
func (in *ConfigAzureadStatus) DeepCopy() *ConfigAzureadStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigAzureadStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipa) DeepCopyInto(out *ConfigFreeipa) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipa.
func (in *ConfigFreeipa) DeepCopy() *ConfigFreeipa {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipa)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigFreeipa) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipaList) DeepCopyInto(out *ConfigFreeipaList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigFreeipa, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipaList.
func (in *ConfigFreeipaList) DeepCopy() *ConfigFreeipaList {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipaList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigFreeipaList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipaObservation) DeepCopyInto(out *ConfigFreeipaObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipaObservation.
func (in *ConfigFreeipaObservation) DeepCopy() *ConfigFreeipaObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipaParameters) DeepCopyInto(out *ConfigFreeipaParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CertificateSecretRef != nil {
		in, out := &in.CertificateSecretRef, &out.CertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ConnectionTimeout != nil {
		in, out := &in.ConnectionTimeout, &out.ConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupDnAttribute != nil {
		in, out := &in.GroupDnAttribute, &out.GroupDnAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberMappingAttribute != nil {
		in, out := &in.GroupMemberMappingAttribute, &out.GroupMemberMappingAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberUserAttribute != nil {
		in, out := &in.GroupMemberUserAttribute, &out.GroupMemberUserAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupNameAttribute != nil {
		in, out := &in.GroupNameAttribute, &out.GroupNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupObjectClass != nil {
		in, out := &in.GroupObjectClass, &out.GroupObjectClass
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchAttribute != nil {
		in, out := &in.GroupSearchAttribute, &out.GroupSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchBase != nil {
		in, out := &in.GroupSearchBase, &out.GroupSearchBase
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NestedGroupMembershipEnabled != nil {
		in, out := &in.NestedGroupMembershipEnabled, &out.NestedGroupMembershipEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.ServiceAccountDistinguishedNameSecretRef = in.ServiceAccountDistinguishedNameSecretRef
	out.ServiceAccountPasswordSecretRef = in.ServiceAccountPasswordSecretRef
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	out.TestPasswordSecretRef = in.TestPasswordSecretRef
	if in.TestUsername != nil {
		in, out := &in.TestUsername, &out.TestUsername
		*out = new(string)
		**out = **in
	}
	if in.UserDisabledBitMask != nil {
		in, out := &in.UserDisabledBitMask, &out.UserDisabledBitMask
		*out = new(float64)
		**out = **in
	}
	if in.UserEnabledAttribute != nil {
		in, out := &in.UserEnabledAttribute, &out.UserEnabledAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserLoginAttribute != nil {
		in, out := &in.UserLoginAttribute, &out.UserLoginAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserMemberAttribute != nil {
		in, out := &in.UserMemberAttribute, &out.UserMemberAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserNameAttribute != nil {
		in, out := &in.UserNameAttribute, &out.UserNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserObjectClass != nil {
		in, out := &in.UserObjectClass, &out.UserObjectClass
		*out = new(string)
		**out = **in
	}
	if in.UserSearchAttribute != nil {
		in, out := &in.UserSearchAttribute, &out.UserSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserSearchBase != nil {
		in, out := &in.UserSearchBase, &out.UserSearchBase
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipaParameters.
func (in *ConfigFreeipaParameters) DeepCopy() *ConfigFreeipaParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipaSpec) DeepCopyInto(out *ConfigFreeipaSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipaSpec.
func (in *ConfigFreeipaSpec) DeepCopy() *ConfigFreeipaSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipaSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigFreeipaStatus) DeepCopyInto(out *ConfigFreeipaStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigFreeipaStatus.
func (in *ConfigFreeipaStatus) DeepCopy() *ConfigFreeipaStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigFreeipaStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithub) DeepCopyInto(out *ConfigGithub) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithub.
func (in *ConfigGithub) DeepCopy() *ConfigGithub {
	if in == nil {
		return nil
	}
	out := new(ConfigGithub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigGithub) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithubList) DeepCopyInto(out *ConfigGithubList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigGithub, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithubList.
func (in *ConfigGithubList) DeepCopy() *ConfigGithubList {
	if in == nil {
		return nil
	}
	out := new(ConfigGithubList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigGithubList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithubObservation) DeepCopyInto(out *ConfigGithubObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithubObservation.
func (in *ConfigGithubObservation) DeepCopy() *ConfigGithubObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigGithubObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithubParameters) DeepCopyInto(out *ConfigGithubParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	out.ClientIDSecretRef = in.ClientIDSecretRef
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithubParameters.
func (in *ConfigGithubParameters) DeepCopy() *ConfigGithubParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigGithubParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithubSpec) DeepCopyInto(out *ConfigGithubSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithubSpec.
func (in *ConfigGithubSpec) DeepCopy() *ConfigGithubSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigGithubSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigGithubStatus) DeepCopyInto(out *ConfigGithubStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigGithubStatus.
func (in *ConfigGithubStatus) DeepCopy() *ConfigGithubStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigGithubStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloak) DeepCopyInto(out *ConfigKeycloak) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloak.
func (in *ConfigKeycloak) DeepCopy() *ConfigKeycloak {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloak)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigKeycloak) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloakList) DeepCopyInto(out *ConfigKeycloakList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigKeycloak, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloakList.
func (in *ConfigKeycloakList) DeepCopy() *ConfigKeycloakList {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloakList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigKeycloakList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloakObservation) DeepCopyInto(out *ConfigKeycloakObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloakObservation.
func (in *ConfigKeycloakObservation) DeepCopy() *ConfigKeycloakObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloakObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloakParameters) DeepCopyInto(out *ConfigKeycloakParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayNameField != nil {
		in, out := &in.DisplayNameField, &out.DisplayNameField
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EntityID != nil {
		in, out := &in.EntityID, &out.EntityID
		*out = new(string)
		**out = **in
	}
	if in.GroupsField != nil {
		in, out := &in.GroupsField, &out.GroupsField
		*out = new(string)
		**out = **in
	}
	out.IdpMetadataContentSecretRef = in.IdpMetadataContentSecretRef
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RancherAPIHost != nil {
		in, out := &in.RancherAPIHost, &out.RancherAPIHost
		*out = new(string)
		**out = **in
	}
	out.SpCertSecretRef = in.SpCertSecretRef
	out.SpKeySecretRef = in.SpKeySecretRef
	if in.UIDField != nil {
		in, out := &in.UIDField, &out.UIDField
		*out = new(string)
		**out = **in
	}
	if in.UserNameField != nil {
		in, out := &in.UserNameField, &out.UserNameField
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloakParameters.
func (in *ConfigKeycloakParameters) DeepCopy() *ConfigKeycloakParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloakParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloakSpec) DeepCopyInto(out *ConfigKeycloakSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloakSpec.
func (in *ConfigKeycloakSpec) DeepCopy() *ConfigKeycloakSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloakSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKeycloakStatus) DeepCopyInto(out *ConfigKeycloakStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKeycloakStatus.
func (in *ConfigKeycloakStatus) DeepCopy() *ConfigKeycloakStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigKeycloakStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOkta) DeepCopyInto(out *ConfigOkta) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOkta.
func (in *ConfigOkta) DeepCopy() *ConfigOkta {
	if in == nil {
		return nil
	}
	out := new(ConfigOkta)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigOkta) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOktaList) DeepCopyInto(out *ConfigOktaList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigOkta, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOktaList.
func (in *ConfigOktaList) DeepCopy() *ConfigOktaList {
	if in == nil {
		return nil
	}
	out := new(ConfigOktaList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigOktaList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOktaObservation) DeepCopyInto(out *ConfigOktaObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOktaObservation.
func (in *ConfigOktaObservation) DeepCopy() *ConfigOktaObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigOktaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOktaParameters) DeepCopyInto(out *ConfigOktaParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayNameField != nil {
		in, out := &in.DisplayNameField, &out.DisplayNameField
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupsField != nil {
		in, out := &in.GroupsField, &out.GroupsField
		*out = new(string)
		**out = **in
	}
	out.IdpMetadataContentSecretRef = in.IdpMetadataContentSecretRef
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RancherAPIHost != nil {
		in, out := &in.RancherAPIHost, &out.RancherAPIHost
		*out = new(string)
		**out = **in
	}
	out.SpCertSecretRef = in.SpCertSecretRef
	out.SpKeySecretRef = in.SpKeySecretRef
	if in.UIDField != nil {
		in, out := &in.UIDField, &out.UIDField
		*out = new(string)
		**out = **in
	}
	if in.UserNameField != nil {
		in, out := &in.UserNameField, &out.UserNameField
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOktaParameters.
func (in *ConfigOktaParameters) DeepCopy() *ConfigOktaParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigOktaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOktaSpec) DeepCopyInto(out *ConfigOktaSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOktaSpec.
func (in *ConfigOktaSpec) DeepCopy() *ConfigOktaSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigOktaSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOktaStatus) DeepCopyInto(out *ConfigOktaStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOktaStatus.
func (in *ConfigOktaStatus) DeepCopy() *ConfigOktaStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigOktaStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldap) DeepCopyInto(out *ConfigOpenldap) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldap.
func (in *ConfigOpenldap) DeepCopy() *ConfigOpenldap {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigOpenldap) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldapList) DeepCopyInto(out *ConfigOpenldapList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigOpenldap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldapList.
func (in *ConfigOpenldapList) DeepCopy() *ConfigOpenldapList {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldapList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigOpenldapList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldapObservation) DeepCopyInto(out *ConfigOpenldapObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldapObservation.
func (in *ConfigOpenldapObservation) DeepCopy() *ConfigOpenldapObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldapObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldapParameters) DeepCopyInto(out *ConfigOpenldapParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CertificateSecretRef != nil {
		in, out := &in.CertificateSecretRef, &out.CertificateSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ConnectionTimeout != nil {
		in, out := &in.ConnectionTimeout, &out.ConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupDnAttribute != nil {
		in, out := &in.GroupDnAttribute, &out.GroupDnAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberMappingAttribute != nil {
		in, out := &in.GroupMemberMappingAttribute, &out.GroupMemberMappingAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupMemberUserAttribute != nil {
		in, out := &in.GroupMemberUserAttribute, &out.GroupMemberUserAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupNameAttribute != nil {
		in, out := &in.GroupNameAttribute, &out.GroupNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupObjectClass != nil {
		in, out := &in.GroupObjectClass, &out.GroupObjectClass
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchAttribute != nil {
		in, out := &in.GroupSearchAttribute, &out.GroupSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupSearchBase != nil {
		in, out := &in.GroupSearchBase, &out.GroupSearchBase
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NestedGroupMembershipEnabled != nil {
		in, out := &in.NestedGroupMembershipEnabled, &out.NestedGroupMembershipEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	out.ServiceAccountDistinguishedNameSecretRef = in.ServiceAccountDistinguishedNameSecretRef
	out.ServiceAccountPasswordSecretRef = in.ServiceAccountPasswordSecretRef
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = new(bool)
		**out = **in
	}
	out.TestPasswordSecretRef = in.TestPasswordSecretRef
	if in.TestUsername != nil {
		in, out := &in.TestUsername, &out.TestUsername
		*out = new(string)
		**out = **in
	}
	if in.UserDisabledBitMask != nil {
		in, out := &in.UserDisabledBitMask, &out.UserDisabledBitMask
		*out = new(float64)
		**out = **in
	}
	if in.UserEnabledAttribute != nil {
		in, out := &in.UserEnabledAttribute, &out.UserEnabledAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserLoginAttribute != nil {
		in, out := &in.UserLoginAttribute, &out.UserLoginAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserMemberAttribute != nil {
		in, out := &in.UserMemberAttribute, &out.UserMemberAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserNameAttribute != nil {
		in, out := &in.UserNameAttribute, &out.UserNameAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserObjectClass != nil {
		in, out := &in.UserObjectClass, &out.UserObjectClass
		*out = new(string)
		**out = **in
	}
	if in.UserSearchAttribute != nil {
		in, out := &in.UserSearchAttribute, &out.UserSearchAttribute
		*out = new(string)
		**out = **in
	}
	if in.UserSearchBase != nil {
		in, out := &in.UserSearchBase, &out.UserSearchBase
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldapParameters.
func (in *ConfigOpenldapParameters) DeepCopy() *ConfigOpenldapParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldapParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldapSpec) DeepCopyInto(out *ConfigOpenldapSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldapSpec.
func (in *ConfigOpenldapSpec) DeepCopy() *ConfigOpenldapSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldapSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigOpenldapStatus) DeepCopyInto(out *ConfigOpenldapStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigOpenldapStatus.
func (in *ConfigOpenldapStatus) DeepCopy() *ConfigOpenldapStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigOpenldapStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPing) DeepCopyInto(out *ConfigPing) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPing.
func (in *ConfigPing) DeepCopy() *ConfigPing {
	if in == nil {
		return nil
	}
	out := new(ConfigPing)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigPing) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPingList) DeepCopyInto(out *ConfigPingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConfigPing, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPingList.
func (in *ConfigPingList) DeepCopy() *ConfigPingList {
	if in == nil {
		return nil
	}
	out := new(ConfigPingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConfigPingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPingObservation) DeepCopyInto(out *ConfigPingObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPingObservation.
func (in *ConfigPingObservation) DeepCopy() *ConfigPingObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigPingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPingParameters) DeepCopyInto(out *ConfigPingParameters) {
	*out = *in
	if in.AccessMode != nil {
		in, out := &in.AccessMode, &out.AccessMode
		*out = new(string)
		**out = **in
	}
	if in.AllowedPrincipalIds != nil {
		in, out := &in.AllowedPrincipalIds, &out.AllowedPrincipalIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DisplayNameField != nil {
		in, out := &in.DisplayNameField, &out.DisplayNameField
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.GroupsField != nil {
		in, out := &in.GroupsField, &out.GroupsField
		*out = new(string)
		**out = **in
	}
	out.IdpMetadataContentSecretRef = in.IdpMetadataContentSecretRef
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RancherAPIHost != nil {
		in, out := &in.RancherAPIHost, &out.RancherAPIHost
		*out = new(string)
		**out = **in
	}
	out.SpCertSecretRef = in.SpCertSecretRef
	out.SpKeySecretRef = in.SpKeySecretRef
	if in.UIDField != nil {
		in, out := &in.UIDField, &out.UIDField
		*out = new(string)
		**out = **in
	}
	if in.UserNameField != nil {
		in, out := &in.UserNameField, &out.UserNameField
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPingParameters.
func (in *ConfigPingParameters) DeepCopy() *ConfigPingParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigPingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPingSpec) DeepCopyInto(out *ConfigPingSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPingSpec.
func (in *ConfigPingSpec) DeepCopy() *ConfigPingSpec {
	if in == nil {
		return nil
	}
	out := new(ConfigPingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPingStatus) DeepCopyInto(out *ConfigPingStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPingStatus.
func (in *ConfigPingStatus) DeepCopy() *ConfigPingStatus {
	if in == nil {
		return nil
	}
	out := new(ConfigPingStatus)
	in.DeepCopyInto(out)
	return out
}
